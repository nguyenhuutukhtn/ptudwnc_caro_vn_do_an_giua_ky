#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('caro-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '1234');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
var io = require('socket.io').listen(server);
server.on('error', onError);
server.on('listening', onListening);

var waitingQueue = [];
var tableCount = 1;

setInterval(function() {
  if (waitingQueue.length < 2) return;

  var index = Math.floor(Math.random() * waitingQueue.length);
  var playerX = waitingQueue[index];
  waitingQueue.splice(index, 1);

  index = Math.floor(Math.random() * waitingQueue.length);
  var playerO = waitingQueue[index];
  waitingQueue.splice(index, 1);

  var name = 'Table' + tableCount++;
  // var table = Table(playerX, playerO);

  playerX.join(name);
  playerO.join(name);
  // playerX.table = table;
  // playerO.table = table;

  playerX.currentTable = name;
  playerO.currentTable = name;

  if (playerX.playerName == playerO.playerName) {
    playerO.playerName += '1';
    playerO.emit('renamed', playerO.playerName);
  }

  io.to(name).emit('join table', {
    playerX: playerX.playerName,
    playerO: playerO.playerName,
    firstPlayer: playerX.playerName
  });
}, 2000);

io.on('connection', function(socket) {
  console.log('Player (id: ' + socket.id + ') connected');
  socket.emit('welcome', 'Đang tìm bạn chơi');

  socket.on('make a move', function(data, fn) {
    console.log(
      'Player (id: ' +
        socket.id +
        ') make a move at [' +
        data.x +
        ';' +
        data.y +
        ']'
    );
    // var table = socket.table;
    // var result = table.makeAMove(data.x, data.y);
    // fn({ ok: result.status >= 0 });
    io.to(socket.currentTable).emit('make a move', {
      x: data.x,
      y: data.y
    });
  });

  socket.on('join queue', function(data) {
    console.log('join queue (id: ' + socket.id + ') named ' + data);
    socket.playerName = data;
    socket.table = null;
    socket.currentTable = null;
    waitingQueue.push(socket);
  });

  socket.on('leave game', function(data) {
    leaveTable(socket);
  });

  socket.on('disconnect', function() {
    console.log('Player (id: ' + socket.id + ') disconnected');
    leaveTable(socket);
  });

  socket.on('chat message', function(msg) {
    console.log('chat message from ' + socket.id + ': ' + msg);
    if (socket.currentTable) {
      var name = socket.currentTable;
      socket.broadcast.to(name).emit('chat message', msg);
    }
  });
});

var leaveTable = function(socket) {
  var index = waitingQueue.indexOf(socket);
  if (index != -1) waitingQueue.splice(index, 1);
  if (socket.table) {
    var table = socket.table;
    var winner;
    if (table.getPlayerX() == socket) winner = table.getPlayerO();
    else winner = table.getPlayerX();

    io.to(socket.currentTable).emit(
      'opponent disconnected',
      winner == table.getPlayerX() ? 'x' : 'o'
    );

    table = null;
    winner.table = null;
  }
};
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log(error);
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
